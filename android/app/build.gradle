def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "org.proninyaroslav.libretrack"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        // Convection:
        //   major.minor.[revision][-some_info]
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
    }

    buildFeatures {
        dataBinding true
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('key.properties')
            if (keystorePropertiesFile.exists()) {
                keystorePropertiesFile.withReader('UTF-8') { reader ->
                    keystoreProperties.load(reader)
                }
            }

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    flavorDimensions "deploy"

    productFlavors {
        main {
            dimension "deploy"
            signingConfig signingConfigs.release
        }
        fdroid {
            dimension "deploy"
            signingConfig null
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

def acraVersion = '5.8.3'

dependencies {
    // Core
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'

    // Other
    implementation('com.journeyapps:zxing-android-embedded:4.2.0') { transitive = false }
    implementation 'com.google.zxing:core:3.4.1'

    // ACRA
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-notification:$acraVersion"
}
